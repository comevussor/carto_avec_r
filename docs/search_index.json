[
["chapitre2.html", "Chapitre 2 Cartographie thématique 2.1 Le package cartography 2.2 Représentations usuelles 2.3 Combinaisons de représentations 2.4 Éléments d’habillage 2.5 Autres fonctionnalités utiles", " Chapitre 2 Cartographie thématique Nous ne détaillerons pas ici les règles de la cartographie thématique. Le lecteur pourra se référer à divers ouvrages de référence : Bertin (1967), Pumain and Béguin (2010), Lambert and Zanin (2016) 2.1 Le package cartography Le package cartography (Giraud and Lambert 2018a) permet de créer et d’intégrer des cartes thématiques dans sa chaîne de traitements en R. Il permet des représentations cartographiques telles que les cartes de symboles proportionnels, des cartes choroplèthes, des typologies, des cartes de flux ou des cartes de discontinuités. Il offre également des fonctions qui permettent d’améliorer la réalisation de la carte, comme des palettes de couleur, des éléments d’habillage (échelle, flèche du nord, titre, légende…), d’y rattacher des labels ou d’accéder à des APIs cartographiques. Pour utiliser ce package plusieurs sources peuvent être consultées : La documentation du package accessible sur internet ou directement dans R (?cartography), La vignette associée au package présente des exemples de scripts, Le blog R Géomatique qui met à disposition ressources et exemples liés au package et plus généralement à l’écosystème spatiale de R, La cheat sheet de cartography, qui résume les principales fonctions du package de façon synthétique. Les fonctions de cartography dédiées à la représentation utilisent le suffixe Layer. En général l’argument x est utilisé par un objet sf et l’argument var sert à renseigner la variable à représenter. 2.2 Représentations usuelles 2.2.1 Carte de symboles proportionnels Les cartes de symboles proportionnels sont utilisées pour représenter les variables de stocks (variables quantitatives absolues, la somme et la moyenne ont un sens). La fonction propSymbolsLayer() propose cette représentation, plusieurs symboles sont disponibles : cercles, carrés et barres. library(cartography) library(sf) # Import des données mtq &lt;- st_read(&quot;data/martinique.shp&quot;, quiet = TRUE) # Communes plot( st_geometry(mtq), col = &quot;lightblue4&quot;, border = &quot;lightblue3&quot;, bg = &quot;lightblue1&quot; ) # Symboles proportionnels propSymbolsLayer( x = mtq, var = &quot;P13_POP&quot;, legend.title.txt = &quot;Population totale\\n(2013)&quot; ) # Titre title(main = &quot;Population en Martinique&quot;) 2.2.2 Carte choroplèthe Les cartes choroplèthes sont utilisées pour représenter les variables de ratios (variables quantitatives relatives, la moyenne a un sens, la somme n’a pas de sens). Pour ce genre de représentation il faut au préalable : choisir une méthode de discrétisation pour transformer une série statistique continue en classes définies par des intervalles, choisir un nombre de classes, choisir une palette de couleurs. La fonction choroLayer() permet de créer des cartes choroplètes . Les arguments nclass, method et breaks servent à paramétrer les discrétisations et la fonction getBreaks() permet de travailler sur les discrétisations en dehors de la fonction choroLayer(). De même, l’argument col est utilisé pour renseigner une palette de couleur mais plusieurs fonctions peuvent être utilisées pour paramétrer les palettes en dehors de la fonction (carto.pal()…). mtq$cagr &lt;- (((mtq$P13_POP / mtq$P08_POP)^(1/4)) - 1) * 100 choroLayer( x = mtq, var = &quot;cagr&quot;, breaks = c(-6.14,-2,-1,0,1,2), col = c(&quot;#135D89&quot;, &quot;#4D95BA&quot;, &quot;#96D1EA&quot;, &quot;#FCDACA&quot;, &quot;#EC4E49&quot;), legend.title.txt = &quot;Taux de croissance\\nannuel moyen\\n(2008-2013)&quot; ) title(main = &quot;Evolution de la population&quot;) 2.2.2.1 Discrétisations La fonction getBreaks() met à disposition les méthodes de discrétisations de variables classique : quantiles, moyenn/écart-type, amplitudes égales, moyennes emboitées, Fisher-Jenks, géométrique … var &lt;- mtq$cagr moy &lt;- mean(var) med &lt;- median(var) std &lt;- sd(var) # Quantile intervals breaks &lt;- getBreaks(v = var, nclass = 6, method = &quot;quantile&quot;) hist(var, probability = TRUE, breaks = breaks, main=&quot;quantiles&quot;, col = carto.pal(pal1 = &quot;wine.pal&quot;,3, &quot;green.pal&quot;, 3)) rug(var) abline(v = med, col = &quot;blue&quot;, lwd = 3) # Mean and standard deviation (msd) breaks &lt;- getBreaks(v = var, method = &quot;msd&quot;, k = 1, middle = TRUE) hist(var, probability = TRUE, breaks = breaks, main=&quot;moyenne / écart-type&quot;, col = carto.pal(pal1 = &quot;wine.pal&quot;,3 , &quot;green.pal&quot;, 2, middle = TRUE)) rug(var) abline(v = moy, col = &quot;red&quot;, lwd = 3) abline(v = moy + 0.5 * std, col = &quot;blue&quot;, lwd = 3) abline(v = moy - 0.5 * std, col = &quot;blue&quot;, lwd = 3) 2.2.2.2 Palettes de couleurs La fonction display.carto.all() permet d’afficher toutes palettes de couleurs disponibles dans cartography. display.carto.all(20) La fonction display.carto.pal() permet de détailler une palette de couleurs. display.carto.pal(&quot;turquoise.pal&quot;) La fonction carto.pal() permet de construire une palette de couleur. Il est possible de créer des palettes associant 2 couleurs. mypal &lt;- carto.pal(pal1 = &quot;wine.pal&quot;, n1 = 5, pal2 = &quot;green.pal&quot;, n2 = 4) image(1:9, 1, as.matrix(1:9), col=mypal, xlab = &quot;&quot;, ylab = &quot;&quot;, xaxt = &quot;n&quot;, yaxt = &quot;n&quot;,bty = &quot;n&quot;) 2.2.3 Carte de typologie Les cartes de typologies sont utilisées pour représenter les variables qualitatives. La fonction typoLayer() propose cette représentation. L’argument legend.values.order sert à ordonner les modalités dans la légende. typoLayer( x = mtq, var=&quot;STATUT&quot;, legend.values.order = c(&quot;Préfecture de région&quot;, &quot;Sous-préfecture&quot;, &quot;Commune simple&quot;), col = c(&quot;aquamarine4&quot;, &quot;yellow3&quot;,&quot;wheat&quot;), legend.pos = &quot;topright&quot;, legend.title.txt = &quot;Statut administratif&quot; ) title(&quot;Statut Administratif&quot;) 2.3 Combinaisons de représentations Plusieurs fonctions sont dédiées à la représentation combinée de 2 variables. 2.3.1 Carte de stocks et de ratios La fonction propSymbolsChoroLayer() représente des symboles proportionnels dont les surfaces sont proportionnelles aux valeurs d’une variable et dont la couleur repose sur la discrétisation d’une seconde variable. La fonction utilise les arguments des fonctions propSymbolsLayer() et choroLayer(). plot( st_geometry(mtq), col=&quot;darkseagreen3&quot;, border=&quot;darkseagreen4&quot;, bg = &quot;lightblue1&quot; ) propSymbolsChoroLayer( x = mtq, var= &quot;P13_POP&quot;, var2 = &quot;cagr&quot;, breaks = c(-6.14,-2,-1,0,1,2), col = c(&quot;#135D89&quot;, &quot;#4D95BA&quot;, &quot;#96D1EA&quot;, &quot;#FCDACA&quot;, &quot;#EC4E49&quot;), legend.var.pos = &quot;topright&quot;, legend.var.title.txt = &quot;Population totale\\n(2013)&quot;, legend.var2.pos = &quot;bottomleft&quot;, legend.var2.title.txt = &quot;Taux de croissance\\nannuel moyen\\n(2008-2013)&quot; ) title(&quot;Evolution de la population&quot;) 2.3.2 Carte de stocks et de qualitative La fonction propSymbolsTypoLayer() représente des symboles proportionnels dont les surfaces sont proportionnelles aux valeurs d’une variable et dont la couleur représente les modalités d’une variable qualitative. La fonction utilise les arguments des fonctions propSymbolsLayer() et typoLayer(). plot( st_geometry(mtq), col=&quot;darkseagreen3&quot;, border=&quot;darkseagreen4&quot;, bg = &quot;lightblue1&quot; ) propSymbolsTypoLayer( x = mtq, var = &quot;P13_POP&quot;, symbols = &quot;circle&quot;, var2 = &quot;STATUT&quot;, col = c(&quot;aquamarine4&quot;, &quot;yellow3&quot;,&quot;wheat&quot;), legend.var.pos = &quot;bottomleft&quot;, legend.var.title.txt = &quot;Population totale\\n(2013)&quot;, legend.var2.title.txt = &quot;Statut administratif&quot;, legend.var2.values.order = c(&quot;Préfecture de région&quot;, &quot;Sous-préfecture&quot;, &quot;Commune simple&quot;) ) title(&quot;Population en Martinique&quot;) 2.4 Éléments d’habillage Pour être finalisée, une carte thématique doit contenir certains éléments aditionnels tels que : le titre, l’auteur, la source, l’échelle, l’orientation… 2.4.1 Habillage complet La fonction layoutLayer() permet d’afficher tous ces éléments. plot(st_geometry(mtq), col = &quot;lightblue4&quot;, border = &quot;lightblue3&quot;, bg = &quot;lightblue1&quot;) layoutLayer( title = &quot;Martinique&quot;, sources = &quot;IGN&quot;, author = &quot;Giraud &amp; Pécout, 2019&quot;, north = TRUE ) Plusieurs arguments permettent de paramétrer plus finement les éléments d’habillage pour aboutir à des cartes plus personnalisées (tabtitle, col, coltitle, theme…). plot(st_geometry(mtq), col = &quot;lightblue4&quot;, border = &quot;lightblue3&quot;, bg = &quot;lightblue1&quot;) layoutLayer( title = &quot;Martinique&quot;, sources = &quot;IGN&quot;, author = &quot;Giraud &amp; Pécout, 2019&quot;, north = TRUE, scale = 5, frame = FALSE, tabtitle = TRUE, theme = &quot;turquoise.pal&quot; ) 2.4.2 Flèche d’orientation La fonction north() permet de mieux choisir la position et l’aspect de la flêche d’orientation. plot(st_geometry(mtq), col = &quot;#D1914D&quot;, border = &quot;white&quot;) north(pos = &quot;topleft&quot;, col = &quot;#D1914D&quot;) layoutLayer(title = &quot;Martinique&quot;, sources = &quot;IGN&quot;, author = &quot;Giraud &amp; Pécout, 2019&quot;, frame = FALSE, scale = 5, coltitle = &quot;#D1914D&quot;,tabtitle = TRUE, postitle = &quot;right&quot;) 2.4.3 Échelle La fonction barscale() permet de mieux choisir la position et l’aspect de l’échelle. plot(st_geometry(mtq), col = &quot;#D1914D&quot;, border = &quot;white&quot;) barscale( size = 5, lwd = 2, cex = 1.2, pos = c(713712.6,1594777) ) layoutLayer(title = &quot;Martinique&quot;, sources = &quot;IGN&quot;, author = &quot;Giraud &amp; Pécout, 2019&quot;, frame = FALSE, scale = 5, coltitle = &quot;#D1914D&quot;,tabtitle = TRUE) 2.4.4 Étiquettes La fonction labelLayer() est dédiée à l’afichage d’étiquettes. plot(st_geometry(mtq), col = &quot;darkseagreen3&quot;, border = &quot;darkseagreen4&quot;, bg = &quot;#A6CAE0&quot;) labelLayer( x = mtq, txt = &quot;LIBGEO&quot;, col= &quot;black&quot;, cex = 0.7, font = 4, halo = TRUE, bg = &quot;white&quot;, r = 0.1, overlap = FALSE, show.lines = FALSE ) layoutLayer(title = &quot;Communes&quot;, tabtitle = TRUE, author = &quot;INSEE, 2016&quot;, sources =&quot;&quot;, north =TRUE, frame = FALSE, scale = 5) 2.5 Autres fonctionnalités utiles 2.5.1 Mise en page 2.5.1.1 Ajuster les marges d’une figure Pour modifier les marges d’une figure (carte ou autre) il faut utiliser la fonction par() qui défini certains paramètres graphiques des figures et son argument mar. La fonction dev.off() efface tous les graphiques en mémoire et permet de réinitialiser les valeurs par défaut. # Modification de la couleur de fond des graphique par(bg=&quot;grey90&quot;) plot(st_geometry(mtq), main=&quot;Marges par défaut&quot;) # Modification des marges par(mar=c(0,0,1.2,0)) plot(st_geometry(mtq), main=&quot;Marges paramétrées&quot;) 2.5.1.2 Centrer la carte sur une région Plusieurs solutions sont possible : Afficher une couche de la zone de zoom sans couleur pour le fond et les bordures puis afficher les couches que l’on souhaite afficher. carbet &lt;- mtq[mtq$LIBGEO==&quot;Le Carbet&quot;,] # affichage de la couche de zoom &quot;invisible&quot; plot( st_geometry(carbet), col = NA, border = NA, bg = &quot;#A6CAE0&quot; ) # affichage des communes plot( st_geometry(mtq), col = &quot;darkseagreen1&quot;, border = &quot;darkseagreen4&quot;, add=TRUE ) # affichage de la couche d&#39;intérêt plot( st_geometry(carbet), col = &quot;darkseagreen3&quot;, border = &quot;darkseagreen4&quot;, lwd = 2, add=TRUE ) layoutLayer( title = &quot;Le Carbet&quot;, sources = &quot;&quot;, author = &quot;&quot;, scale = 1, tabtitle = TRUE, frame=FALSE ) Utiliser les paramètres xlim et ylim de la fonction plot() aves les valeurs fournies par la fonction st_bbox() diams &lt;- mtq[mtq$LIBGEO==&quot;Le Diamant&quot;,] diams_bb &lt;- st_bbox(diams) # affichage des communes plot( st_geometry(mtq), col = &quot;darkseagreen1&quot;, border = &quot;darkseagreen4&quot;, xlim = diams_bb[c(1,3)], ylim = diams_bb[c(2,4)], bg = &quot;#A6CAE0&quot; ) # affichage de la couche d&#39;intérêt plot( st_geometry(diams), col = &quot;darkseagreen3&quot;, border = &quot;darkseagreen4&quot;, lwd = 2, add=TRUE ) layoutLayer( title = &quot;Le Diamant&quot;, sources = &quot;&quot;, author = &quot;&quot;, scale = 1, tabtitle = TRUE, frame=FALSE ) 2.5.1.3 Afficher plusieurs cartes sur la même figure Il faut ici utiliser l’argument mfrow de la fonction par(). Le premier chiffre représente le nombre lignes et le deuxième le nombre de colonnes. # une ligne et deux colonnes par(mfrow=c(1,2), mar = c(0,.2,1.2,.2)) # 1ere carte carbet_bb &lt;- st_bbox(carbet) plot(st_geometry(mtq), col = &quot;darkseagreen1&quot;, border = &quot;darkseagreen4&quot;, xlim = carbet_bb[c(1,3)], ylim = carbet_bb[c(2,4)], bg = &quot;#A6CAE0&quot;) plot(st_geometry(carbet), col = &quot;darkseagreen3&quot;, border = &quot;darkseagreen4&quot;, lwd = 2, add=TRUE) layoutLayer(title = &quot;Le Carbet&quot;, sources = &quot;&quot;, author = &quot;&quot;, scale = 1, tabtitle = TRUE, frame=FALSE) # 2eme carte plot(st_geometry(mtq), col = &quot;darkseagreen1&quot;, border = &quot;darkseagreen4&quot;, xlim = diams_bb[c(1,3)], ylim = carbet_bb[c(2,4)], bg = &quot;#A6CAE0&quot;) plot(st_geometry(diams), col = &quot;darkseagreen3&quot;, border = &quot;darkseagreen4&quot;, lwd = 2, add=TRUE) layoutLayer(title = &quot;Le Diamant&quot;, sources = &quot;&quot;, author = &quot;&quot;, scale = 1, tabtitle = TRUE, frame=FALSE) # une ligne et deux colonnes par(mfrow=c(2,1), mar = c(0.2,0,1.4,0)) # 1ere carte carbet_bb &lt;- st_bbox(carbet) plot(st_geometry(mtq), col = &quot;darkseagreen1&quot;, border = &quot;darkseagreen4&quot;, xlim = carbet_bb[c(1,3)], ylim = carbet_bb[c(2,4)], bg = &quot;#A6CAE0&quot;) plot(st_geometry(carbet), col = &quot;darkseagreen3&quot;, border = &quot;darkseagreen4&quot;, lwd = 2, add=TRUE) layoutLayer(title = &quot;Le Carbet&quot;, sources = &quot;&quot;, author = &quot;&quot;, scale = 1, tabtitle = TRUE, frame=FALSE) # 2eme carte plot(st_geometry(mtq), col = &quot;darkseagreen1&quot;, border = &quot;darkseagreen4&quot;, xlim = diams_bb[c(1,3)], ylim = diams_bb[c(2,4)], bg = &quot;#A6CAE0&quot;) plot(st_geometry(diams), col = &quot;darkseagreen3&quot;, border = &quot;darkseagreen4&quot;, lwd = 2, add=TRUE) layoutLayer(title = &quot;Le Diamant&quot;, sources = &quot;&quot;, author = &quot;&quot;, scale = 1, tabtitle = TRUE, frame=FALSE) 2.5.1.4 Obtenir un ratio de figure adapté Il est assez difficile d’exporter des figures (cartes ou autres) dont le ratio hauteur/largeur soit satisfaisant. Le ratio par défaut des figure au format png est de 1 (480x480 pixels) : png(filename = &quot;img/martinique1.png&quot;, res = 96) par(mar = c(0,0,1.2,0), bg = &quot;grey90&quot;) plot(st_geometry(mtq), bg = &quot;#A6CAE0&quot;, col = &quot;#D1914D&quot;, border = &quot;white&quot;) layoutLayer(title = &quot;Martinique&quot;, sources = &quot;&quot;, author = &quot;&quot;, scale = NULL) dev.off() Sur cette carte beaucoup d’espace est perdu à l’est et à l’ouest de l’ile. La fonction getFigDim() de cartography permet de choisir un ratio hauteur/largeur correspondant à l’emprise d’un objet sf en prenant en compte une largeur (ou hauteur) fixée, les paramètres de marges et la résolution souhaitée. getFigDim(x = mtq, width = 480, mar = c(0,0,1.2,0), res = 96) [1] 480 583 png(filename = &quot;img/martinique2.png&quot;, width = 480, height = 583, res = 96) par(mar = c(0,0,1.2,0), bg = &quot;grey90&quot;) plot(st_geometry(mtq), bg = &quot;#A6CAE0&quot;, col = &quot;#D1914D&quot;, border = &quot;white&quot;) layoutLayer(title = &quot;Martinique&quot;, sources = &quot;&quot;, author = &quot;&quot;, scale = NULL) dev.off() L’emprise de cette carte est exactement celle de l’île. 2.5.1.5 Placer précisément un élément sur la carte La fonction locator() permet de cliquer sur une figure et d’obtenir les coordonnées d’un point dans le système de coordonnées de la figure (de la carte). plot(st_geometry(mtq), col = &quot;darkseagreen3&quot;, border = &quot;darkseagreen4&quot;, bg = &quot;#A6CAE0&quot;) text(x = 694019, y = 1615161, labels = &quot;MER\\nDES\\nCARAÏBES&quot;, col = &quot;#e3f1f9&quot;, font = 3, srt=20 ) 2.5.2 Utiliser un fond de carte OSM La fonction getTiles() permet de télécharger des fonds de cartes OSM et la fonction tilesLayer() permet de les afficher. type &lt;- c( &quot;osm&quot;, &quot;hotstyle&quot;, &quot;hikebike&quot;, &quot;osmgrayscale&quot;, &quot;stamenbw&quot;, &quot;stamenwatercolor&quot;, &quot;cartodark&quot;, &quot;cartolight&quot;) par(mar = c(0,0,0,0), mfrow = c(3,3)) for (i in type){ tilesLayer(getTiles(x = mtq, type = i, crop=TRUE)) mtext(side = 3, line = -1.5, text = i, col=&quot;red&quot;) } 2.5.3 Créer un effet crayonné library(sf) mtq_pencil &lt;- getPencilLayer(x = mtq) typoLayer( x = mtq_pencil, var=&quot;STATUT&quot;, col = c(&quot;aquamarine4&quot;, &quot;yellow3&quot;,&quot;wheat&quot;), legend.values.order = c(&quot;Préfecture de région&quot;, &quot;Sous-préfecture&quot;, &quot;Commune simple&quot;), legend.pos = &quot;topright&quot;, legend.title.txt = &quot;Status&quot; ) plot(st_geometry(mtq), add = TRUE, ldy=2) layoutLayer(title = &quot;Statut Administratif&quot;,tabtitle=TRUE, author= &quot;INSEE, 2016&quot;, sources=&quot;&quot;, frame=FALSE, scale = 5) north(pos = &quot;topleft&quot;) 2.5.4 Ajouter un ombrage à une couche plot(st_geometry(mtq) + c(500, -500), col = &quot;grey50&quot;, border = NA, bg = &quot;lightblue1&quot;) plot(st_geometry(mtq), col=&quot;darkseagreen3&quot;, border=&quot;darkseagreen4&quot;, add=TRUE) layoutLayer(title = &quot;Communes&quot;,tabtitle=TRUE, author= &quot;INSEE, 2016&quot;, sources=&quot;&quot;, north=TRUE, frame=FALSE, scale = 5) 2.5.5 Création de cartons Le package mapinsetr(Giraud and Lambert 2018b) est dédié à la crétion de cartons cartographiques. Il n’est pas sur le CRAN pour l’instant, mais on peut l’installer via le package remotes. remotes::install_github(&quot;riatelab/mapinsetr&quot;) mapinsetr permet de découper, redimensionner et déplacer une zone d’un fond de carte. library(mapinsetr) library(cartography) library(sf) mtq &lt;- st_read(&quot;data/martinique.shp&quot;, quiet = TRUE) resto &lt;- st_read(&quot;data/resto.gpkg&quot;, quiet = TRUE) # Création d&#39;un masque box_FDF &lt;- create_mask(bb = c(706880, 1615030, 708650, 1616870), prj = st_crs(mtq)) # Découpage, déplacement et redimentionnement des couches sous le masque zbox_FDF &lt;- move_and_resize( x = box_FDF, mask = box_FDF, xy = c(689000, 1603000), k = 7 ) zmtq_FDF &lt;- move_and_resize( x = mtq, mask = box_FDF, xy = c(689000, 1603000), k = 7 ) zresto_FDF &lt;- move_and_resize( x = resto, mask = box_FDF, xy = c(689000, 1603000), k = 7 ) # Affichage de la carte et des couhes crées plot(st_geometry(mtq), col = &quot;lightblue4&quot;, border = &quot;lightblue3&quot;, bg = &quot;lightblue1&quot;) plot(st_geometry(resto), add=T, pch=20, col = &quot;#330A5FFF&quot;, cex = 0.5) plot(st_geometry(box_FDF), border = &quot;red&quot;, add = T, lwd = 2) plot(st_geometry(zmtq_FDF), col = &quot;lightblue4&quot;, border = &quot;lightblue3&quot;, add=TRUE) plot(st_geometry(zresto_FDF), add=TRUE, pch=20, col = &quot;#330A5FFF&quot;, cex = 0.5) plot(st_geometry(zbox_FDF), border = &quot;red&quot;, add = T, lwd = 2) layoutLayer(title = &quot;Carte initiale + couches créées&quot;,tabtitle=TRUE, author= &quot;INSEE, 2016&quot;, sources=&quot;&quot;, north=TRUE, frame=FALSE, scale = 5) # Création de couches unqiues comprenant le zoom resto &lt;- inset_rbinder(l = list(resto, zresto_FDF)) mtq &lt;- inset_rbinder(l = list(mtq, zmtq_FDF)) box &lt;- inset_rbinder(l = list(box_FDF, zbox_FDF)) plot(st_geometry(mtq), col = &quot;lightblue4&quot;, border = &quot;lightblue3&quot;, bg = &quot;lightblue1&quot;) plot(st_geometry(resto), add=T, pch=20, col = &quot;#330A5FFF&quot;, cex = 0.5) plot(st_geometry(box), border = &quot;red&quot;, add = T, lwd = 2) layoutLayer(title = &quot;Carte finale avec carton&quot;,tabtitle=TRUE, author= &quot;INSEE, 2016&quot;, sources=&quot;&quot;, north=TRUE, frame=FALSE, scale = 5) References "]
]
