[
["index.html", "Cartographie avec R Introduction", " Cartographie avec R Timothée Giraud &amp; Hugues Pécout 2018-12-12 Introduction Voici le document associé au cours de cartographie avec R. Pour suivre ce cours vous aurez besoin des dernières versions de R et de RStudio. Vous aurez aussi besoin d’un certain nombre de packages additionels : sf cartography osrm mapview SpatialPosition mapinsetr raster linemap spatstats … Ce cours ce déroule sur 3 jours : Jour 1 - Les données spatiales Jour 2 - Cartographie thématique Jour 3 - Cartographie thématique avancée “La science est infaillible, mais les savants se trompent toujours.” (Anatole France, 1889). Ce principe peut également être appliqué à la cartographie. En effet, toute carte est issue d’un processus complexe de choix, de selections, d’opérations statistiques ou géomatiques. Certains auteurs énoncent que les cartes sont subjectives (Brunet). D’autres auteurs disent carrément que les cartes mentent (Monmonnier). Quoi qu’il en soit, toute carte résulte de l’acte créateur des choix de son auteur. Lorsque l’on se situe dans une démarche scientifique, ces choix doivent être traçables, partageables et soumis à la discussion scientifique (ce qui est difficilement faisable quand ces cartes sont réalisées dans un environnement “clic-bouton”). La réalisation des cartes dans le langage R permet de tracer toutes les opérations nécessaires à une réalisation cartographique de qualité. Réaliser des cartes dans ce langage unique permet, en diffusant le code source en même temps que les cartes, de jouer “cartes sur table”. Cela permet de détailler les choix qui ont été faits et s’exposer à la controverse scientifique. Cela permet aussi de travailler à plusieurs sur une carte, en associant des compétences complémentaires (sémiologie graphique, statistique, géomatique, etc.) et de faciliter la mise à jour de documents déjà rélisés (en rééxecutant un code préalablement réalisé, par exemple). Au final, l’utilisation de R nécessite un effort non négligeable pour ceux qui ne sont pas habitués à l’univers de la programmation informatique. Mais définitivement, l’investissement n’a que des avantages. "],
["jour1.html", "Jour 1 Les données spatiales 1.1 Le package sf 1.2 Import / Export 1.3 Les projections 1.4 Les opérations de géotraitement 1.5 Le package raster", " Jour 1 Les données spatiales Il est possible d’importer, de manipuler, de traiter, d’afficher et d’exporter des données spatiales avec R. La grande majorité des opérations de géotraitement sont disponible dans R grace au package sf. Il devient alors possible d’utiliser R comme un SIG. 1.1 Le package sf Trois packages “historiques”: rgdal : interface entre R et les librairies GDAL (Geospatial Data Abstraction Library) et PROJ4. sp : classes et methodes pour les données spatiales dans R. rgeos : accès à la librairie d’opérations spatiales GEOS (Geometry Engine - Open Source) : area, perimeter, distances, dissolve, buffer, overlap, union, contains… Les fonctionnalités de sp, rgeos et rgdal dans un package unique. Manipulation plus aisée, objets plus simples Auteur principal et maintainer : Edzer Pebesma (auteur de sp) Compatible avec les syntaxes pipe et les opérateurs du tidyverse. Format des objets spatiaux sf Import de données library(sf) mtq &lt;- st_read(&quot;data/martinique.shp&quot;) Reading layer `martinique&#39; from data source `/home/tim/Documents/prz/Cartographie_avec_R/data/martinique.shp&#39; using driver `ESRI Shapefile&#39; Simple feature collection with 34 features and 23 fields geometry type: POLYGON dimension: XY bbox: xmin: 690574.4 ymin: 1592426 xmax: 736126.5 ymax: 1645660 epsg (SRID): 32620 proj4string: +proj=utm +zone=20 +datum=WGS84 +units=m +no_defs Jointure de données Avec merge Affichage de données plot(st_geometry(mtq)) 1.2 Import / Export Import de données library(sf) mtq &lt;- st_read(&quot;data/martinique.shp&quot;) Reading layer `martinique&#39; from data source `/home/tim/Documents/prz/Cartographie_avec_R/data/martinique.shp&#39; using driver `ESRI Shapefile&#39; Simple feature collection with 34 features and 23 fields geometry type: POLYGON dimension: XY bbox: xmin: 690574.4 ymin: 1592426 xmax: 736126.5 ymax: 1645660 epsg (SRID): 32620 proj4string: +proj=utm +zone=20 +datum=WGS84 +units=m +no_defs 1.3 Les projections 1.4 Les opérations de géotraitement Utiliser R comme un SIG mtq_c &lt;- st_centroid(mtq) plot(st_geometry(mtq)) plot(st_geometry(mtq_c), add=TRUE, cex=1.2, col=&quot;red&quot;, pch=20) mat &lt;- st_distance(x=mtq_c,y=mtq_c) mat[1:5,1:5] Units: [m] [,1] [,2] [,3] [,4] [,5] [1,] 0.000 35297.56 3091.501 12131.617 17136.310 [2,] 35297.557 0.00 38332.602 25518.913 18605.249 [3,] 3091.501 38332.60 0.000 15094.702 20226.198 [4,] 12131.617 25518.91 15094.702 0.000 7177.011 [5,] 17136.310 18605.25 20226.198 7177.011 0.000 Agréger des polygones mtq_u &lt;- st_union(mtq) plot(st_geometry(mtq), col=&quot;lightblue&quot;) plot(st_geometry(mtq_u), add=T, lwd=2, border = &quot;red&quot;) Construire une zone tampon mtq_b &lt;- st_buffer(x = mtq_u, dist = 5000) plot(st_geometry(mtq), col=&quot;lightblue&quot;) plot(st_geometry(mtq_u), add=T, lwd=2) plot(st_geometry(mtq_b), add=T, lwd=2, border = &quot;red&quot;) Réaliser une intersection m &lt;- rbind(c(700015,1624212), c(700015,1641586), c(719127,1641586), c(719127,1624212), c(700015,1624212)) p &lt;- st_sf(st_sfc(st_polygon(list(m))), crs = st_crs(mtq)) plot(st_geometry(mtq)) plot(p, border=&quot;red&quot;, lwd=2, add=T) Réaliser une intersection mtq_z &lt;- st_intersection(x = mtq, y = p) plot(st_geometry(mtq)) plot(st_geometry(mtq_z), col=&quot;red&quot;, border=&quot;green&quot;, add=T) Construire des polygones de Voronoi google: “st_voronoi R sf” (https://github.com/r-spatial/sf/issues/474 &amp; https://stackoverflow.com/questions/45719790/create-voronoi-polygon-with-simple-feature-in-r) mtq_v &lt;- st_voronoi(x = st_union(mtq_c)) mtq_v &lt;- st_intersection(st_cast(mtq_v), st_union(mtq)) mtq_v &lt;- st_join(x = st_sf(mtq_v), y = mtq_c, join=st_intersects) mtq_v &lt;- st_cast(mtq_v, &quot;MULTIPOLYGON&quot;) plot(st_geometry(mtq_v), col=&#39;lightblue&#39;) 1.5 Le package raster "],
["jour2.html", "Jour 2 Cartographie thématique 2.1 Le package cartography 2.2 Palettes de couleurs 2.3 Discrétisations 2.4 Combinaisons 2.5 Labels 2.6 Les données OSM 2.7 Cartographie interactive 2.8 Géocodage d’adresses 2.9 Création de cartons", " Jour 2 Cartographie thématique 2.1 Le package cartography Le package cartography permet de créer et intégrer des cartes thématiques dans sa chaîne de traitements en R. Il permet des représentations cartographiques tels que les cartes en symboles proportionnels, des cartes choroplèthes, des typologies, des cartes de flux ou des cartes de discontinuités. Il offre également des fonctions qui permettent d’améliorer la réalisation de la carte, comme des palettes de couleur, des éléments d’habillage (échelle, flèche du nord, titre, légende…), d’y rattacher des labels ou d’accéder à des APIs cartographiques. Pour utiliser aisément ce package, plusieurs sources d’intérêts peuvent être consultées : La documentation du package qui documente toutes les fonctions du package, accessible directement dans R Studio. Pour cela, vous pouvez taper simplement : ?cartography La cheat sheet de cartography, qui résume les principales fonctions du package de façon synthétique. La vignette associée au package, qui présente des réalisations issues de ce package, elle aussi accessible directement dans R. Le blog R Géomatique, maintenu par l’auteur de cartography qui met à disposition ressources et exemples d’intérêt liés au package et à la représentation d’information spatiale sous R. 2.1.1 Symboles proportionnels library(cartography) library(sf) # Import des données mtq &lt;- st_read(system.file(&quot;shape/martinique.shp&quot;, package=&quot;cartography&quot;)) # Communes plot(st_geometry(mtq), col = &quot;lightblue4&quot;, border = &quot;lightblue3&quot;, bg = &quot;lightblue1&quot;) # Symboles proportionnels propSymbolsLayer(x = mtq, var = &quot;P13_POP&quot;, legend.title.txt = &quot;Total\\npopulation (2013)&quot;) # Titre title(main = &quot;Population en Martinique&quot;) 2.1.2 Carte choroplèthe mtq$cagr &lt;- (((mtq$P13_POP / mtq$P08_POP)^(1/4)) - 1) * 100 choroLayer(x = mtq, var = &quot;cagr&quot;, breaks = c(-6.14,-2,-1,0,1,2), col = c(&quot;#135D89&quot;, &quot;#4D95BA&quot;, &quot;#96D1EA&quot;, &quot;#FCDACA&quot;, &quot;#EC4E49&quot;), legend.title.txt = &quot;Compound annual\\ngrowth rate&quot;) title(main = &quot;Evolution de la population&quot;) 2.2 Palettes de couleurs display.carto.all(20) display.carto.pal(&quot;orange.pal&quot;) mypal &lt;- carto.pal(pal1 = &quot;wine.pal&quot;, n1 = 7, pal2 = &quot;green.pal&quot;, n2 = 12, middle = TRUE, transparency = TRUE) k &lt;- length(mypal) image(1:k, 1, as.matrix(1:k), col=mypal, xlab = paste(k,&quot; classes&quot;,sep=&quot;&quot;), ylab = &quot;&quot;, xaxt = &quot;n&quot;, yaxt = &quot;n&quot;,bty = &quot;n&quot;) 2.3 Discrétisations var &lt;- mtq$cagr moy &lt;- mean(var) med &lt;- median(var) std &lt;- sd(var) # Quantile intervals breaks &lt;- getBreaks(v = var, nclass = 6, method = &quot;quantile&quot;) hist(var, probability = TRUE, breaks = breaks, main=&quot;quantiles&quot;, col = carto.pal(pal1 = &quot;wine.pal&quot;,3, &quot;green.pal&quot;, 3)) rug(var) abline(v = med, col = &quot;blue&quot;, lwd = 3) # Mean and standard deviation (msd) breaks &lt;- getBreaks(v = var, method = &quot;msd&quot;, k = 1, middle = TRUE) hist(var, probability = TRUE, breaks = breaks, main=&quot;moyenne / écart-type&quot;, col = carto.pal(pal1 = &quot;wine.pal&quot;,3 , &quot;green.pal&quot;, 2, middle = TRUE)) rug(var) abline(v = moy, col = &quot;red&quot;, lwd = 3) abline(v = moy + 0.5 * std, col = &quot;blue&quot;, lwd = 3) abline(v = moy - 0.5 * std, col = &quot;blue&quot;, lwd = 3) 2.4 Combinaisons plot(st_geometry(mtq), col = &quot;lightblue4&quot;, border = &quot;lightblue3&quot;, bg = &quot;lightblue1&quot;) propSymbolsChoroLayer(x = mtq, var= &quot;P13_POP&quot;, legend.var.title.txt = &quot;Total\\npopulation (2013)&quot;, var2 = &quot;cagr&quot;, legend.var.pos = &quot;bottomleft&quot;, breaks = c(-6.14,-2,-1,0,1,2), col = c(&quot;#135D89&quot;, &quot;#4D95BA&quot;, &quot;#96D1EA&quot;, &quot;#FCDACA&quot;, &quot;#EC4E49&quot;), legend.var2.title.txt = &quot;Compound annual\\ngrowth rate&quot;) # Title title(main = &quot;Evolution de la population&quot;) 2.5 Labels plot(st_geometry(mtq), col = &quot;darkseagreen3&quot;, border = &quot;darkseagreen4&quot;, bg = &quot;#A6CAE0&quot;) labelLayer(x = mtq, txt = &quot;LIBGEO&quot;, col= &quot;black&quot;, cex = 0.7, font = 4, halo = TRUE, bg = &quot;white&quot;, r = 0.1, overlap = FALSE, show.lines = FALSE) 2.6 Les données OSM OpenStreetMap (OSM) est un projet de cartographie participative qui a pour but de constituer une base de données géographiques libre à l’échelle mondiale. OpenStreetMap vous permet de voir, modifier et utiliser des données géographiques dans le Monde entier. En résumé, c’est comme Google Maps, mais en mieux… 2.6.1 Données vectorielles library(&quot;osmdata&quot;) ## Data (c) OpenStreetMap contributors, ODbL 1.0. http://www.openstreetmap.org/copyright prj &lt;- st_crs(Paris) bbox &lt;- st_bbox(st_transform(Paris,4326)) q &lt;- opq(bbox = bbox , timeout = 2000) %&gt;% add_osm_feature(key = &#39;man_made&#39;, value = &#39;surveillance&#39;) cameras &lt;- osmdata_sf(q)$osm_points cameras &lt;- st_transform(cameras, prj) cameras$ok &lt;- st_intersects(st_geometry(cameras), st_geometry(Paris), sparse = FALSE) cameras &lt;- cameras[cameras$ok == T,] Paname &lt;- getTiles(x = Paris, type =&quot;cartodark&quot;, crop = TRUE) tilesLayer(Paname) par(mar = c(0.5,0.5,1.5,0.5)) plot(st_geometry(Paris), lwd=1, border=&quot;white&quot;, lty=2, add=T) plot(st_geometry(cameras), pch=20, col=&quot;red&quot;, add=T) 2.6.2 Données raster tiles &lt;- getTiles(x = mtq, type = &quot;osm&quot;, crop=T, zoom = 11) tilesLayer(tiles) plot(st_geometry(mtq), add=T) 2.7 Cartographie interactive leaflet / mapview 2.8 Géocodage d’adresses 2.9 Création de cartons "],
["jour3.html", "Jour 3 Cartographie thématique avancée 3.1 Les anamorphoses 3.2 Les grilles régulières 3.3 Les discontinuités 3.4 Les lissages 3.5 3D", " Jour 3 Cartographie thématique avancée 3.1 Les anamorphoses Voir : Les anamorphoses cartographiques Nicolas Lambert, 2015 “L’anamorphose classique est une représentation des États (ou de mailles quelconques) par des rectangles ou des polygones quelconques en fonction d’une quantité qui leur est rattaché.” “On s’efforce de garder l’arrangement général des mailles ou la silhouette du continent.” Brunet, R., Ferras, R., &amp; Théry, H. (1993). Les mots de la géographie: dictionnaire critique (No. 03) 911 BRU). 3.1.1 Les cartogrammes de Dorling La taille des cercles est proportionnelle à une variable. La position des cercles est définie selon les positions de départ. Dorling, Daniel (1996): Area Cartograms: Their Use and Creation, Concepts and Techniques in Modern Geography (CATMOG), 59 3.1.2 Le principe 3.1.3 Exemple 3.1.4 Précautions d’emploi - On identifie assez mal l’espace On peut nommer les cercles pour se repérer On peut s’aider de la couleur pour faire des clusters et mieux identifier les blocks géographiques + La perception de la quantité est très bonne. Les tailles de cercles sont vraiment comparables 3.1.5 Les cartogrammes non continus La taille des polygones est proportionnelle à une variable. L’agencement des polygones les uns par rapport aux autres est conservée. La forme des polygones est ressemblante. 3.1.6 Exemple 3.1.7 Précautions d’emploi - Non contigu, la topologie est perdue. + La conservation de la forme des polygones est optimisée. 3.1.8 Les cartogrammes continus La taille des polygones est proportionnelle à une variable. L’agencement des polygones les uns par rapport aux autres est conservée. Pour conserver la contiguité, la forme des polygones est fortement transformée. 3.1.9 Exemple 3.1.10 Précautions d’emploi - Par rapport aux anamorphoses non contigues, la forme des polygones est fortement distordue. + C’est une “vraie carte de géographie” : la topologie et la contiguité sont conservées. 3.1.11 Interêts des anamorphoses Représentation cartographique perçue comme innovante (même si la methode date de 40 ans) Image très généralisée qui rend bien compte des quantités et des gradiants. Une vraie image de communication : provoque, suscite l’intérêt, véhicule un message fort, interpelle. 3.1.12 Faiblesses des anamorphoses Perte des repères visuels (difficile de retrouver son pays, ou sa région sur la carte). Ne permet pas de connaître les situations locales. Demande un effort de lecture. Gestion des données manquantes 3.2 Les grilles régulières La méthode du carroyage consiste à découper l’espace géographique en un maillage formé de carrés réguliers dans une projection donnée. La donnée est répartie sur ce quadrillage régulier au prorata de la surface représentée. Le quadrillage permet ainsi de s’affranchir des mailles administratives. La fonction getGridLayer du package cartography permet de construire ces grilles régulières. 3.2.1 Exemples 3.2.2 Précautions d’emploi - Perte de précision, maillage sans signification. La version simple (au prorata de la surface), implique une equirépartition du phénomène dans chaque unités. + Permet la comparaison de maillages différents, à plusieurs dates ou de différentes sources. 3.3 Les discontinuités Ce type de représentation permet de souligner cartographiquement les discontinuités territoriales d’un phénomène. L’accent est porter sur ce qui distingue des territoires. Pour chaque frontière nous calculons le rapports ou la différence des valeurs des polygones de part et d’autre. Puis nous représentons la frontière par un figuré d’autant plus épais que la différence est forte. Il est souvent bénéfique de coupler ce type de représentation à une représentation choroplèthe (pour comprendre le sens des discontinuités). 3.3.1 Exemples 3.3.2 Précautions d’emploi - Ces cartes ne sont pas évidentes à paramétrer. Le choix des critères (seuil, type de différences…) va fortement influencer la représentation. En fonction du maillage la lisibilité peut être faible. + Représentation très puissante pour montrer les inégalités. 3.4 Les lissages L’idée principale du lissage est de filtrer l’information pour révéler des structures spatiales sous-jacentes. C’est un ensemble de méthodes qui consistent à affecter aux points que l’on observe une valeur prenant en compte les valeurs de leur voisinnage. Il existe plusieurs méthodes de lissage (kde, potentiels…) plus ou moins paramétrables. Cette méthode permet de passer représentations ponctuelles à une représentation continu 3.4.1 Exemples 3.4.2 Précautions d’emploi - Il est difficile de paramétrer correctement les fonctions de lissages. Elles doivent s’appuyer sur des hypothèses de comportement dans l’espace. La compréhension par un public large n’est pas évidente, il faut alors simplifier les légendes, la présentation de la méthode. + Permet de faire ressortir des phénomènes spatiaux sous-jacents invisibles directement. Les cartes produites attirent l’oeil par leur originalité. Cette méthode permet de passer d’une représentation ponctuelle ou discontuinue (dans un maillage) à une représentation continue s’affranchissant des maillages existants. 3.4.3 KDE 3.4.4 Stewart Vignette du package SpatialPosition 3.5 3D 3.5.1 linemap library(linemap) library(sf) data(&quot;popOcc&quot;) data(&quot;occitanie&quot;) opar &lt;- par(mar=c(0,0,0,0), bg = &quot;ivory2&quot;) bb &lt;- st_bbox(occitanie) plot(st_geometry(occitanie), col=&quot;ivory1&quot;, border = NA) linemap(x = popOcc, var = &quot;pop&quot;, k = 2.5, threshold = 50, col = &quot;ivory1&quot;, border = &quot;ivory4&quot;, lwd = 0.6, add = TRUE) text(x = bb[1], y = bb[4],adj = c(0,1), labels = &quot;Répartition de la\\npopulation\\nen Occitanie&quot;, col = &quot;ivory4&quot;, font = 2, cex = 1.8) # add sources mapsources &lt;-&quot;Timothée Giraud\\nR 3.4.1, cartography 2.0.0, linemap 0.1.0\\nDonnées carroyées à 1 kilomètre, INSEE 2010&quot; text(x = bb[3], y = bb[2],labels = mapsources, col = &quot;ivory4&quot;, font = 3, adj = c(1,0), cex = 0.6 ) 3.5.2 rayshader "]
]
